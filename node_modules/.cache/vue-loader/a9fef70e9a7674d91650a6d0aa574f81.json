{"remainingRequest":"/home/redfox/Documentos/chime-web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/redfox/Documentos/chime-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/redfox/Documentos/chime-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/redfox/Documentos/chime-web/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/home/redfox/Documentos/chime-web/src/App.vue","mtime":1584896259900},{"path":"/home/redfox/Documentos/chime-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/redfox/Documentos/chime-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/redfox/Documentos/chime-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/redfox/Documentos/chime-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}